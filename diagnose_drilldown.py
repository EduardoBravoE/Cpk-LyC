#!/usr/bin/env python3
"""
Script de diagn√≥stico para el sistema de drilldown
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

def test_drilldown_imports():
    """Verificar que todas las importaciones del drilldown funcionen"""
    try:
        from UTILS.insights import get_cached_drilldown_results, compute_clave_drilldown_data
        from UTILS.confiabilidad_panel import _clear_drilldown_cache
        print("‚úÖ Todas las importaciones del drilldown funcionan correctamente")
        return True
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False

def test_cache_functions():
    """Verificar que las funciones de cache est√©n correctamente decoradas"""
    try:
        from UTILS.insights import get_cached_drilldown_results, compute_clave_drilldown_data
        import inspect

        # Verificar decoradores
        if hasattr(get_cached_drilldown_results, 'cache_info'):
            print("‚úÖ get_cached_drilldown_results tiene cache activado")
        else:
            print("‚ùå get_cached_drilldown_results NO tiene cache")

        if hasattr(compute_clave_drilldown_data, 'cache_info'):
            print("‚úÖ compute_clave_drilldown_data tiene cache activado")
        else:
            print("‚ùå compute_clave_drilldown_data NO tiene cache")

        return True
    except Exception as e:
        print(f"‚ùå Error al verificar funciones de cache: {e}")
        return False

def test_error_handling():
    """Verificar que el manejo de errores est√© implementado"""
    try:
        from UTILS.insights import get_cached_drilldown_results, compute_clave_drilldown_data
        import pandas as pd

        # Probar con DataFrame vac√≠o
        empty_df = pd.DataFrame()
        result = get_cached_drilldown_results(empty_df, "test_clave")

        if isinstance(result, dict) and 'dia' in result and 'maquina' in result:
            print("‚úÖ Manejo de errores funciona correctamente")
            return True
        else:
            print("‚ùå Manejo de errores no funciona correctamente")
            return False

    except Exception as e:
        print(f"‚ùå Error en manejo de errores: {e}")
        return False

def test_timeout_mechanism():
    """Verificar que el mecanismo de timeout est√© disponible"""
    try:
        # Verificar que TimeoutError est√© disponible
        raise TimeoutError("Test timeout")
    except TimeoutError:
        print("‚úÖ TimeoutError est√° disponible")
        return True
    except Exception as e:
        print(f"‚ùå TimeoutError no est√° disponible: {e}")
        return False

if __name__ == "__main__":
    print("üîç Diagn√≥stico del Sistema de Drilldown")
    print("=" * 50)

    success = True
    success &= test_drilldown_imports()
    success &= test_cache_functions()
    success &= test_error_handling()
    success &= test_timeout_mechanism()

    print("\n" + "=" * 50)
    if success:
        print("üéâ ¬°Diagn√≥stico completado! El sistema de drilldown est√° correctamente configurado.")
        print("\nMejoras implementadas:")
        print("‚úÖ Cache inteligente con invalidaci√≥n autom√°tica")
        print("‚úÖ Manejo robusto de errores")
        print("‚úÖ Timeout de 30 segundos para evitar hangs")
        print("‚úÖ Limpieza autom√°tica del estado al cambiar claves")
        print("‚úÖ Feedback detallado con tiempo de procesamiento")
    else:
        print("‚ö†Ô∏è  Se encontraron problemas en el diagn√≥stico.")
        exit(1)
